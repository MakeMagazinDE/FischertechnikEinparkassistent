const AIN1 = C_PIN_01       # AIN1 Pin connected to IO01
const AIN2 = C_PIN_02       # AIN2 Pin connected to IO02
const ENCODER = C_PIN_07    # Motor encoder on IN07
const MIN_DUTY_CYCLE = 0
const MAX_DUTY_CYCLE = 4095

const SERVO_CTRL = C_PIN_03 # Servo Control on IO03
const MIN_SERVO_POS = 102
const MAX_SERVO_POS = 512
const SLOW = 50
const STRAIGHT = 0
const RIGHT = -35
const BACKWARD = false
const SERVO_DELAY = 250

initGPIO(AIN1, OUTPUT)
initGPIO(AIN2, OUTPUT)
initGPIO(SERVO_CTRL, OUTPUT)

setPWMFrequency(50)         # default: 500 Hz
background(0,0,0)
textFont(FONT_ROBOTO_24)

def turn(angle):
    dutyCycle = map(angle, 90, -90, MIN_SERVO_POS, MAX_SERVO_POS)
    writePWM(SERVO_CTRL, dutyCycle)
    delay(SERVO_DELAY)

def driveFixedLengthTrack(distance:int, speed:byte, forward:bool):
    dutyCycle = map(speed, 0, 100, MIN_DUTY_CYCLE, MAX_DUTY_CYCLE)
    initPulseCounter(ENCODER)   # reset counter
    if forward:
        writePWM(AIN1, 0)
        writePWM(AIN2, dutyCycle)
    else:
        writePWM(AIN1, dutyCycle)
        writePWM(AIN2, 0)
    while readPulseCounter(ENCODER) <= distance:
        clear()                 # clear display
        drawText(10, 10, "Speed: " + speed)
        if forward:
            drawText(10, 40, "Direction: forward")
        else:
            drawText(10, 40, "Direction: backward")
        drawText(10, 70, "Impulses: " + readPulseCounter(ENCODER))
        update()                # output speed, direction and impulses on display
    writePWM(AIN1, 0)           # turn motor off
    writePWM(AIN2, 0)   

def onClick():
    turn(RIGHT)
    driveFixedLengthTrack(235, SLOW, BACKWARD)
    turn(STRAIGHT)
